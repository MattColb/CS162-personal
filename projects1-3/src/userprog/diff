--- process.c	2025-05-07 12:52:56.002704900 +0000
+++ process2.c	2025-05-07 12:51:38.457519500 +0000
@@ -1,8 +1,8 @@
 #include "userprog/process.h"
 #include <debug.h>
+#include <float.h>
 #include <inttypes.h>
 #include <round.h>
-#include <float.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -22,26 +22,20 @@
 #include "threads/thread.h"
 #include "threads/vaddr.h"
 
-// static struct semaphore temporary;
 static thread_func start_process NO_RETURN;
 static thread_func start_pthread NO_RETURN;
 static bool load(const char* cmd_line, void (**eip)(void), void** esp);
-// static bool load(const char* file_name, void (**eip)(void), void** esp);
 bool setup_thread(void (**eip)(void), void** esp);
 
+/* Data structure shared between process_execute() in the
+   invoking thread and start_process() in the newly invoked
+   thread. */
 struct exec_info {
-  const char* file_name;
-  struct semaphore load_done;
-  struct wait_status* wait_status;
-  bool success;
-};
-
-struct thrd_info {
-  struct process* pcb;
-  stub_fun sf;
-  pthread_fun tf;
-  void* arg;
-  struct semaphore load_done;
+  const char* file_name;           /* Program to load. */
+  struct semaphore load_done;      /* "Up"ed when loading complete. */
+  struct wait_status* wait_status; /* Child process. */
+  struct dir* parent_work_dir;
+  bool success; /* Program successfully loaded? */
 };
 
 /* Initializes user programs in the system by ensuring the main
@@ -60,8 +54,8 @@
   t->pcb = calloc(sizeof(struct process), 1);
   success = t->pcb != NULL;
 
-  // Should only need a list of the userprog children
-  if (success){
+  /* Main only needs a list of children */
+  if (success) {
     list_init(&t->pcb->children);
   }
 
@@ -74,40 +68,28 @@
    before process_execute() returns.  Returns the new process's
    process id, or TID_ERROR if the thread cannot be created. */
 pid_t process_execute(const char* file_name) {
-  // char* fn_copy;
   struct exec_info exec;
   char thread_name[16];
   char* save_ptr;
   tid_t tid;
+  struct thread* t = thread_current();
 
-  // sema_init(&temporary, 0);
-  // /* Make a copy of FILE_NAME.
-  //    Otherwise there's a race between the caller and load(). */
-  // fn_copy = palloc_get_page(0);
-  // if (fn_copy == NULL)
-  //   return TID_ERROR;
-  // strlcpy(fn_copy, file_name, PGSIZE);
-
-  // /* Create a new thread to execute FILE_NAME. */
-  // tid = thread_create(file_name, PRI_DEFAULT, start_process, fn_copy);
-  // if (tid == TID_ERROR)
-  //   palloc_free_page(fn_copy);
-
-  // Initialize exec
+  /* Initialize exec_info. */
   exec.file_name = file_name;
   sema_init(&exec.load_done, 0);
+  exec.parent_work_dir = t->pcb->work_dir;
 
+  /* Create a new thread to execute FILE_NAME. */
   strlcpy(thread_name, file_name, sizeof thread_name);
   strtok_r(thread_name, " ", &save_ptr);
   tid = thread_create(thread_name, PRI_DEFAULT, start_process, &exec);
   if (tid != TID_ERROR) {
     sema_down(&exec.load_done);
-    if (exec.success) {
+    if (exec.success)
       list_push_back(&thread_current()->pcb->children, &exec.wait_status->elem);
-    } else{
+    else
       tid = TID_ERROR;
     }
-  }
 
   return tid;
 }
@@ -115,14 +97,13 @@
 /* A thread function that loads a user process and starts it
    running. */
 static void start_process(void* exec_) {
-  // char* file_name = (char*)file_name_;
   struct thread* t = thread_current();
+
   struct exec_info* exec = exec_;
   struct intr_frame if_;
   uint32_t fpu_curr[27];
   bool success, pcb_success, ws_success;
   
-
   /* Allocate process control block */
   struct process* new_pcb = malloc(sizeof(struct process));
   success = pcb_success = new_pcb != NULL;
@@ -137,39 +118,21 @@
     // Continue initializing the PCB as normal
     list_init(&t->pcb->children);
     list_init(&t->pcb->fds);
-    list_init(&t->pcb->thread_joins);
-    list_init(&t->pcb->thread_list);
     t->pcb->next_handle = 2;
     t->pcb->main_thread = t;
-
-    struct pages* pages = malloc(sizeof(struct pages));
-    t->pcb->pages = pages;
-    lock_init(&pages->lock);
-
-    for(int i =0; i < MAX_THREADS; i++) {
-      pages->is_free[i] = true;
-    }
-
-    struct join_elem* join_elem = malloc(sizeof(struct join_elem));
-    sema_init(&join_elem->join, 0);
-    join_elem->joined = false;
-    join_elem->tid = t->tid;
-    list_push_back(&t->pcb->thread_joins, &join_elem->elem);
-
-    struct thread_elem* thread_elem = malloc(sizeof(struct thread_elem));
-    thread_elem->thread = t;
-    list_push_back(&t->pcb->thread_list, &thread_elem->elem);
-
     strlcpy(t->pcb->process_name, t->name, sizeof t->name);
+
+    //set the cwd as the root directory
+    t->pcb->work_dir = exec->parent_work_dir;
   }
 
-  // Allocate wait
+  /* Allocate wait_status. */
   if (success) {
     exec->wait_status = t->pcb->wait_status = malloc(sizeof *exec->wait_status);
     success = ws_success = exec->wait_status != NULL;
   }
 
-  // Initialize wait
+  /* Initialize wait_status. */
   if (success) {
     lock_init(&exec->wait_status->lock);
     exec->wait_status->ref_cnt = 2;
@@ -198,23 +161,15 @@
     free(pcb_to_free);
   }
 
-  /* Clean up. Exit on failure or jump to userspace */
-  // palloc_free_page(file_name);
-  // if (!success) {
-  //   sema_up(&temporary);
-  //   thread_exit();
-  // }
-
-  // Handle failure with successful wait_status malloc
-  if (!success && ws_success) {
+  /* Handle failure with successful wait_status malloc */
+  if (!success && ws_success)
     free(exec->wait_status);
-  }
 
+  /* Notify parent thread and clean up. */
   exec->success = success;
   sema_up(&exec->load_done);
-  if (!success) {
+  if (!success)
     thread_exit();
-  }
 
   /* Start the user process by simulating a return from an
      interrupt, implemented by intr_exit (in
@@ -226,16 +181,17 @@
   NOT_REACHED();
 }
 
+/* Releases one reference to CS and, if it is now unreferenced,
+   frees it. */
 static void release_child(struct wait_status* cs) {
-  int new_ref;
+  int new_ref_cnt;
   
   lock_acquire(&cs->lock);
-  new_ref = --cs->ref_cnt;
+  new_ref_cnt = --cs->ref_cnt;
   lock_release(&cs->lock);
 
-  if (new_ref == 0) {
+  if (new_ref_cnt == 0)
     free(cs);
-  }
 }
 
 /* Waits for process with PID child_pid to die and returns its exit status.
@@ -244,18 +200,11 @@
    child of the calling process, or if process_wait() has already
    been successfully called for the given PID, returns -1
    immediately, without waiting. */
-
-//    This function will be implemented in problem 2-2.  For now, it
-//    does nothing. */
-// int process_wait(pid_t child_pid UNUSED) {
-//   sema_down(&temporary);
-//   return 0;
-// }
-
 int process_wait(pid_t child_pid) {
    struct thread* cur = thread_current();
    struct list_elem* e;
-   for (e = list_head(&cur->pcb->children); e != list_tail(&cur->pcb->children); e=list_next(e)) {
+
+  for (e = list_begin(&cur->pcb->children); e != list_end(&cur->pcb->children); e = list_next(e)) {
     struct wait_status* cs = list_entry(e, struct wait_status, elem);
     if (cs->pid == child_pid) {
       int exit_code;
@@ -269,12 +218,11 @@
    return -1;
 }
 
-// WAIT
 /* Free the current process's resources. */
 void process_exit(void) {
   struct thread* cur = thread_current();
-  uint32_t* pd;
   struct list_elem *e, *next;
+  uint32_t* pd;
 
   /* If this thread does not have a PCB, don't worry */
   if (cur->pcb == NULL) {
@@ -282,67 +230,19 @@
     NOT_REACHED();
   }
 
-  for (int i =0; i< 256; i++) {
-    struct lock* lock = &cur->pcb->user_locks[i];
-    if (lock_held_by_current_thread(lock)) {
-      lock_release(lock);
-    }
-  }
-
-  for(e = list_begin(&cur->pcb->thread_joins); e != list_end(&cur->pcb->thread_joins);
-      e = list_next(e)) {
-    struct join_elem* curr = list_entry(e, struct join_elem, elem);
-    if (curr->tid == cur->tid) {
-      sema_up(&curr->join);
-      break;
-    }
-  }
-
-  cur->pcb->marked_for_slaughter = true;
-
-  for(e = list_begin(&cur->pcb->thread_list); e != list_end(&cur->pcb->thread_list);
-      e = list_next(e)) {
-    struct thread* curr = list_entry(e, struct thread_elem, elem)->thread;
-    if (!is_main_thread(curr->tid, cur->pcb)) {
-      pthread_join(curr->tid);
-    }
-  }
-  for (int i =0; i< 256; i++) {
-    if (cur->pcb->user_locks[i] != NULL) {
-      if (lock_held_by_current_thread(cur->pcb->user_locks[i])) {
-        lock_release(cur->pcb->user_locks[i]);
-      }
-      free(cur->pcb->user_locks[i])
-    }
-  }
-
-  for (int i =0; i< 256; i++) {
-    if (cur->pcb->user_semas[i] != NULL) {
-      free(cur->pcb->user_semas[i]);
-    }
-  }
-
-  void* upage = ((uint8_t*)PHYS_BASE) - PGSIZE * (cur->page_no + 1);
-  void* kpage = pagedir_get_page(cur->pcb->pagedir, upage);
-  pagedir_clear_page(cur->pcb->pagedir, upage);
-  palloc_free_page(kpage);
-
-  lock_acquire(&cur->pcb->pages->lock);
-  cur->pcb->pages->is_free[cur->page_no] = true;
-  lock_release(&cur->pcb->pages->lock);
-
-  free(cur->pcb->pages);
-
-  save_file_close(cur->pcb->bin_file);
+  /* Close executable (and allow writes). */
+  safe_file_close(cur->pcb->bin_file);
 
+  /* Free entries of children list. */
   for (e = list_begin(&cur->pcb->children); e != list_end(&cur->pcb->children); e = next) {
-    struct wait_status* cs = list_entry(e, struct wait_status; elem);
+    struct wait_status* cs = list_entry(e, struct wait_status, elem);
     next = list_remove(e);
     release_child(cs);
   }
 
-  while(!list_empty(&cur->pcb->fds)) {
-    e = list_back(&cur->pcb->fds);
+  /* Close all currently open file descriptors */
+  while (!list_empty(&cur->pcb->fds)) {
+    e = list_begin(&cur->pcb->fds);
     struct file_descriptor* fd = list_entry(e, struct file_descriptor, elem);
     sys_close(fd->handle);
   }
@@ -363,6 +263,7 @@
     pagedir_destroy(pd);
   }
 
+  /* Notify parent that we're dead, as the last thing we do. */
   if (cur->pcb->wait_status != NULL) {
     struct wait_status* cs = cur->pcb->wait_status;
     printf("%s: exit(%d)\n", cur->pcb->process_name, cs->exit_code);
@@ -377,8 +278,6 @@
   struct process* pcb_to_free = cur->pcb;
   cur->pcb = NULL;
   free(pcb_to_free);
-
-  // sema_up(&temporary);
   thread_exit();
 }
 
@@ -470,12 +369,12 @@
    Returns true if successful, false otherwise. */
 bool load(const char* cmd_line, void (**eip)(void), void** esp) {
   struct thread* t = thread_current();
-  char file_name[NAME_MAX+2];
+  char file_name[NAME_MAX + 2];
   struct Elf32_Ehdr ehdr;
   struct file* file = NULL;
   off_t file_ofs;
   bool success = false;
-  char *cp;
+  char* cp;
   int i;
 
   /* Allocate and activate page directory. */
@@ -484,14 +383,13 @@
     goto done;
   process_activate();
 
-  while (cmd_line == ' '){
+  /* Extract file_name from command line. */
+  while (*cmd_line == ' ')
     cmd_line++;
-  }
   strlcpy(file_name, cmd_line, sizeof file_name);
   cp = strchr(file_name, ' ');
-  if (cp != NULL) {
+  if (cp != NULL)
     *cp = '\0';
-  }
 
   /* Open executable file. */
   t->pcb->bin_file = file = filesys_open(file_name);
@@ -570,7 +468,6 @@
 
 done:
   /* We arrive here whether the load is successful or not. */
-  // file_close(file);
   return success;
 }
 
@@ -675,11 +572,12 @@
   return true;
 }
 
+/* Reverse the order of the ARGC pointers to char in ARGV. */
 static void reverse(int argc, char** argv) {
-  for (; argc >1; argc-=2, argv++) {
+  for (; argc > 1; argc -= 2, argv++) {
     char* tmp = argv[0];
-    argv[0] = argv[argc-1];
-    argv[argc-1] = tmp;
+    argv[0] = argv[argc - 1];
+    argv[argc - 1] = tmp;
   }
 }
 
@@ -689,80 +587,84 @@
    boundary.
 
    If successful, returns a pointer to the newly pushed object.
-   On failure, returns a null pointer */
-static void* push(uint8_t* kpage, size_t *ofs, const void* buf, size_t size){
-  size_t pad_size = ROUND_UP(size, sizeof(uint32_t));
-  if (*ofs < pad_size)
+   On failure, returns a null pointer. */
+static void* push(uint8_t* kpage, size_t* ofs, const void* buf, size_t size) {
+  size_t padsize = ROUND_UP(size, sizeof(uint32_t));
+  if (*ofs < padsize)
     return NULL;
 
-  *ofs -= pad_size;
-  memcpy(*ofs + kpage + (pad_size-size), buf, size);
-  return *ofs + kpage + (pad_size-size);
+  *ofs -= padsize;
+  memcpy(kpage + *ofs + (padsize - size), buf, size);
+  return kpage + *ofs + (padsize - size);
 }
 
-static bool init_cmd_line(uint8_t* upage, uint8_t* kpage, char* cmd_line, void** esp) {
+/* Sets up command line arguments in KPAGE, which will be mapped
+   to UPAGE in user space.  The command line arguments are taken
+   from CMD_LINE, separated by spaces.  Sets *ESP to the initial
+   stack pointer for the process. */
+static bool init_cmd_line(uint8_t* kpage, uint8_t* upage, const char* cmd_line, void** esp) {
   size_t ofs = PGSIZE;
   char* const null = NULL;
-  char* cmd_line_cpy;
+  char* cmd_line_copy;
   char *karg, *saveptr;
   int argc;
   char** argv;
   static void* arguments[MAX_ARGS];
 
-  // Push command line string
-  cmd_line_cpy = push(kpage, &ofs, cmd_line, sizeof(cmd_line) +1);
-  if (cmd_line_cpy == NULL){
+  /* Push command line string. */
+  cmd_line_copy = push(kpage, &ofs, cmd_line, strlen(cmd_line) + 1);
+  if (cmd_line_copy == NULL)
     return false;
-  }
 
-  // Parse cmd line into args
+  /* Parse command line into arguments */
   argc = 0;
-  for (karg = strtok_r(cmd_line_cpy, " ", &saveptr); karg != NULL; karg = strtok_r(NULL, " ", &saveptr)){
+  for (karg = strtok_r(cmd_line_copy, " ", &saveptr); karg != NULL;
+       karg = strtok_r(NULL, " ", &saveptr)) {
     arguments[argc++] = upage + (karg - (char*)kpage);
   }
 
-  //Insert padding so that it's always 16 bit aligned
-  size_t padding = ((PGSIZE-ofs) + (argc+1) * sizeof(char*) + sizeof(char*) + sizeof(int)) %16;
-  ofs -= 16 - padding;
+  // Insert padding to ensure the stack pointer will ultimately be 16-byte-aligned
+  size_t alignment_adjustment =
+      ((PGSIZE - ofs) + (argc + 1) * sizeof(char*) + sizeof(char**) + sizeof(int)) % 16;
+  ofs -= 16 - alignment_adjustment;
 
-  // check null for argv[argc]
-  if (push(kpage, &ofs, &null, sizeof(null)) == NULL)
+  // Push sentinel null for argv[argc]
+  if (push(kpage, &ofs, &null, sizeof null) == NULL)
     return false;
 
-  //Push command line args
-  for (int i = 0; i<argc; i++){
+  // Push command line arguments
+  for (int i = 0; i < argc; i++) {
     if (push(kpage, &ofs, arguments + i, sizeof(void**)) == NULL)
       return false;
   }
 
-  // Reverse cmd line args
-  argv = (char**)(upage+ofs);
-  reverse(argv, (char**)(upage+ofs));
-
-  // Push argc, argv, return
-  if (push(kpage, &ofs, &argv, sizeof argv) ==NULL ||
-      push(kpage, &ofs, &argc, sizeof argc) ==NULL ||
-      push(kpage, &ofs, &null, sizeof null) ==NULL)
+  /* Reverse the order of the command line arguments. */
+  argv = (char**)(upage + ofs);
+  reverse(argc, (char**)(kpage + ofs));
+
+  /* Push argv, argc, "return address". */
+  if (push(kpage, &ofs, &argv, sizeof argv) == NULL ||
+      push(kpage, &ofs, &argc, sizeof argc) == NULL ||
+      push(kpage, &ofs, &null, sizeof null) == NULL)
        return false;
 
-  *esp = upage+ofs;
+  /* Set initial stack pointer. */
+  *esp = upage + ofs;
   return true;
 }
 
-/* Create a minimal stack by mapping a zeroed page at the top of
-   user virtual memory. */
+/* Create a minimal stack for T by mapping a page at the
+   top of user virtual memory.  Fills in the page using CMD_LINE
+   and sets *ESP to the stack pointer. */
 static bool setup_stack(const char* cmd_line, void** esp) {
   uint8_t* kpage;
   bool success = false;
 
   kpage = palloc_get_page(PAL_USER | PAL_ZERO);
   if (kpage != NULL) {
-    // success = install_page(((uint8_t*)PHYS_BASE) - PGSIZE, kpage, true);
-    // if (success)
-    //   *esp = PHYS_BASE;
     uint8_t* upage = ((uint8_t*)PHYS_BASE) - PGSIZE;
     if (install_page(upage, kpage, true))
-      success = init_cmd_line(upage, kpage, cmd_line, esp);
+      success = init_cmd_line(kpage, upage, cmd_line, esp);
     else
       palloc_free_page(kpage);
   }
@@ -801,63 +703,7 @@
    This function will be implemented in Project 2: Multithreading. For
    now, it does nothing. You may find it necessary to change the
    function signature. */
-bool setup_thread(void (**eip)(void) UNUSED, void** esp UNUSED) {
-  size_t ofs = PGSIZE;
-  char* const null = NULL;
-  struct thrd_info* thrd = thrd_;
-  struct thread* t = thread_current();
-  tid_t tid = t->tid;
-
-  uint8_t* kpage = palloc_get_page(PAL_USER);
-  if (kpage == NULL) {
-    printf("could not palloc a page for thread %d's stack\n", tid);
-    return false;
-  }
-
-  bool page_found = false;
-
-  lock_acquire(&t->pcb->pages->lock);
-  for (int i =1; i<MAX_THREADS; i++) {
-    if (t->pcb->pages->is_free[i]) {
-      t->pcb->pages->is_free[i] = false;
-      t->page_no = i;
-      page_found = true;
-      break;
-    }
-  }
-  lock_release(&t->pcb->pages->lock);
-
-  if (!page_found) {
-    palloc_free_page(kpage);
-    return false;
-  }
-
-  uint8_t* upage = ((uint8_t*)PHYS_BASE) - PGSIZE * (t->page_no + 1);
-  if (!install_page(upage, kpage, true)) {
-    lock_acquire(&t->pcb->pages->lock);
-    t->pcb->pages->is_free[t->page_no] = true;
-    lock_release(&t->pcb->pages->lock);
-
-    palloc_free_page(kpage);
-    printf("install_page failed on thread %d\n", tid);
-    return false;
-  }
-  *eip = (void (*)(void))(thrd->sf);
-  if (push(kpage, &ofs, &thrd->arg, 4) == NULL ||
-      push(kpage, &ofs, &thrd->tf, 4) == NULL ||
-      push(kpage, &ofs, &null, sizeof null) == NULL) {
-    lock_acquire(&t->pcb->pages->lock);
-    t->pcb->pages->is_free[t->page_no] = true;
-    lock_release(&t->pcb->pages->lock);
-
-    palloc_free_page(kpage);
-    return false;
-  }
-
-  *esp = upage + ofs;
-
-  return true;
-}
+bool setup_thread(void (**eip)(void) UNUSED, void** esp UNUSED) { return false; }
 
 /* Starts a new thread with a new user stack running SF, which takes
    TF and ARG as arguments on its user stack. This new thread may be
@@ -868,25 +714,7 @@
    This function will be implemented in Project 2: Multithreading and
    should be similar to process_execute (). For now, it does nothing.
    */
-tid_t pthread_execute(stub_fun sf UNUSED, pthread_fun tf UNUSED, void* arg UNUSED) {
-  struct thread* t = thread_current();
-  struct thrd_info exec;
-  char thread_name[16] = "thisthread";
-  tid_t tid;
-
-  exec.sf = sf;
-  exec.tf = tf;
-  exec.arg = arg;
-  exec.pcb = t->pcb;
-
-  sema_init(&exec.load_done, 0);
-  tid = thread_create(thread_name, PRI_DEFAULT, start_pthread, &exec);
-  if (tid != TID_ERROR) {
-    sema_down(&exec.load_done);
-  }
-
-  return tid;
-}
+tid_t pthread_execute(stub_fun sf UNUSED, pthread_fun tf UNUSED, void* arg UNUSED) { return -1; }
 
 /* A thread function that creates a new user thread and starts it
    running. Responsible for adding itself to the list of threads in
@@ -894,40 +722,7 @@
 
    This function will be implemented in Project 2: Multithreading and
    should be similar to start_process (). For now, it does nothing. */
-static void start_pthread(void* exec_ UNUSED) {
-  struct thread* t = thread_current();
-  struct thrd_info* exec = exec_;
-  struct intr_frame if_;
-  bool success;
-  t->pcb = exec->pcb;
-
-  struct join_elem* join_elem = malloc(sizeof(struct join_elem));
-  sema_init(&join_elem->join, 0);
-  join_elem->joined = false;
-  join_elem->tid = t->tid;
-  list_push_back(&t->pcb->thread_joins, &join_elem->elem);
-
-  struct thread_elem* thread_elem = malloc(sizeof(struct thread_elem));
-  thread_elem->thread = t;
-  list_push_back(&t->pcb->thread_list, &thread_elem->elem);
-
-  memset(&if_, 0, sizeof if_);
-  if_.gs = if_.fs = if_.es = if_.ds = if_.ss = SEL_UDSEG;
-  if_.cs = SEL_UCSEG;
-  if_.eflags = FLAG_IF | FLAG_MBS;
-  pagedir_activate(t->pcb->pagedir);
-  success = setup_thread(&if_.eip, &if_.esp, (void*)exec_);
-  if (!success) {
-    join_elem->joined = true;
-    sema_up(&exec->load_done);
-    thread_exit();
-  }
-
-  sema_up(&exec->load_done);
-
-  asm volatile("movl %0, %%esp; jmp intr_exit" : : "g"(&if_) : "memory");
-  NOT_REACHED();
-}
+static void start_pthread(void* exec_ UNUSED) {}
 
 /* Waits for thread with TID to die, if that thread was spawned
    in the same process and has not been waited on yet. Returns TID on
@@ -936,26 +731,7 @@
 
    This function will be implemented in Project 2: Multithreading. For
    now, it does nothing. */
-tid_t pthread_join(tid_t tid UNUSED) {
-  struct thread* t = thread_current();
-
-  struct list_elem* e;
-  for(e = list_begin(&thread->pcb->thread_joins); e != list_end(&t->pcb->thread_joins);
-      e = list_next(e)) {
-    struct join_elem* curr = list_entry(e, struct join_elem, elem);
-    if (curr->tid == tid) {
-      if (curr->joined) {
-        break;
-      }
-      curr->joined = true;
-      sema_down(&curr->join);
-      list_remove(e);
-      return tid;
-    }
-  }
-
-  return TID_ERROR;
-}
+tid_t pthread_join(tid_t tid UNUSED) { return -1; }
 
 /* Free the current thread's resources. Most resources will
    be freed on thread_exit(), so all we have to do is deallocate the
@@ -966,42 +742,7 @@
 
    This function will be implemented in Project 2: Multithreading. For
    now, it does nothing. */
-void pthread_exit(void) {
-  struct thread* t = thread_current();
-  if (is_main_thread(t, t->pcb)) {
-    pthread_exit_main();
-    return;
-  }
-
-  struct process* pcb = t->pcb;
-  void* upage = ((uint8_t*)PHYS_BASE) - PGSIZE * (t->page_no +1);
-  void* kpage = pagedir_get_page(pcb->pagedir, upage);
-  pagedir_clear_page(pcb->pagedir, upage);
-  palloc_free_page(kpage);
-
-  lock_acquire(&t->pcb->pages->lock);
-  t->pcb->pages->is_free[t->page_no] = true;
-  lock_release(&t->pcb->pages->lock);
-
-  for (int i =0; i< 256; i++) {
-    struct lock* lock = &pcb->user_locks[i];
-    if (lock_held_by_current_thread(lock)) {
-      lock_release(lock);
-    }
-  }
-
-  struct list_elem* e;
-  for(e = list_begin(&t->pcb->thread_joins); e != list_end(&t->pcb->thread_joins);
-      e = list_next(e)) {
-    struct join_elem* curr = list_entry(e, struct join_elem, elem);
-    if (curr->tid == t->tid) {
-      sema_up(&curr->join);
-      break;
-    }
-  }
-
-  thread_exit();
-}
+void pthread_exit(void) {}
 
 /* Only to be used when the main thread explicitly calls pthread_exit.
    The main thread should wait on all threads in the process to
@@ -1011,35 +752,4 @@
 
    This function will be implemented in Project 2: Multithreading. For
    now, it does nothing. */
-void pthread_exit_main(void) {
-  struct thread* t = thread_current();
-  struct process* pcb = t->pcb;
-
-  for (int i =0; i< 256; i++) {
-    struct lock* lock = &pcb->user_locks[i];
-    if (lock_held_by_current_thread(lock)) {
-      lock_release(lock);
-    }
-  }
-
-  struct list_elem* e;
-  for(e = list_begin(&t->pcb->thread_joins); e != list_end(&t->pcb->thread_joins);
-      e = list_next(e)) {
-    struct join_elem* curr = list_entry(e, struct join_elem, elem);
-    if (curr->tid == t->tid) {
-      sema_up(&curr->join);
-      break;
-    }
-  }
-
-  struct list_elem* next;
-  for(e = list_begin(&t->pcb->thread_list); e != list_end(&t->pcb->thread_list); e = next) {
-    struct thread* curr = list_entry(e, struct thread_elem, elem)->thread;
-    if (!is_main_thread(curr->tid, pcb)) {
-      pthread_join(curr->tid);
-      next = list_remove(e);
-    }
-  }
-  thread_current()->pcb->wait_status->exit_code = 0;
-  process_exit();
-}
+void pthread_exit_main(void) {}
\ No newline at end of file
